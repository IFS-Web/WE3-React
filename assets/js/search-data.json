<!DOCTYPE html> <html lang="en-US"> <head> <meta charset="UTF-8"> <meta http-equiv="X-UA-Compatible" content="IE=Edge"> <title> - WE3 – React</title> <link rel="shortcut icon" href="/WE3-React/favicon.ico" type="image/x-icon"> <link rel="stylesheet" href="/WE3-React/assets/css/just-the-docs-default.css"> <script type="text/javascript" src="/WE3-React/assets/js/just-the-docs.js"></script> <meta name="viewport" content="width=device-width, initial-scale=1"> <!-- Begin Jekyll SEO tag v2.8.0 --> <title>WE3 – React | Unterlagen zum React-Teil des Web Engineering 3 Moduls der OST – Ostschweizer Fachhochschule</title> <meta name="generator" content="Jekyll v4.2.2" /> <meta property="og:title" content="WE3 – React" /> <meta property="og:locale" content="en_US" /> <meta name="description" content="Unterlagen zum React-Teil des Web Engineering 3 Moduls der OST – Ostschweizer Fachhochschule" /> <meta property="og:description" content="Unterlagen zum React-Teil des Web Engineering 3 Moduls der OST – Ostschweizer Fachhochschule" /> <link rel="canonical" href="/WE3-React/assets/js/search-data.json" /> <meta property="og:url" content="/WE3-React/assets/js/search-data.json" /> <meta property="og:site_name" content="WE3 – React" /> <meta property="og:type" content="website" /> <meta name="twitter:card" content="summary" /> <meta property="twitter:title" content="WE3 – React" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"WebPage","description":"Unterlagen zum React-Teil des Web Engineering 3 Moduls der OST – Ostschweizer Fachhochschule","headline":"WE3 – React","url":"/WE3-React/assets/js/search-data.json"}</script> <!-- End Jekyll SEO tag --> </head> <body> <svg xmlns="http://www.w3.org/2000/svg" style="display: none;"> <symbol id="svg-link" viewBox="0 0 24 24"> <title>Link</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-link"> <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path> </svg> </symbol> <symbol id="svg-search" viewBox="0 0 24 24"> <title>Search</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"> <circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line> </svg> </symbol> <symbol id="svg-menu" viewBox="0 0 24 24"> <title>Menu</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"> <line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line> </svg> </symbol> <symbol id="svg-arrow-right" viewBox="0 0 24 24"> <title>Expand</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"> <polyline points="9 18 15 12 9 6"></polyline> </svg> </symbol> <symbol id="svg-doc" viewBox="0 0 24 24"> <title>Document</title> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"> <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline> </svg> </symbol> </svg> <div class="side-bar"> <div class="site-header"> <a href="/WE3-React/" class="site-title lh-tight"> WE3 – React </a> <a href="#" id="menu-button" class="site-button"> <svg viewBox="0 0 24 24" class="icon"><use xlink:href="#svg-menu"></use></svg> </a> </div> <nav role="navigation" aria-label="Main" id="site-nav" class="site-nav"> <ul class="nav-list"><li class="nav-list-item"><a href="/WE3-React/" class="nav-list-link">Home</a></li><li class="nav-list-item"><a href="/WE3-React/introduction/" class="nav-list-link">Einführung</a></li><li class="nav-list-item"><a href="#" class="nav-list-expander"><svg viewBox="0 0 24 24"><use xlink:href="#svg-arrow-right"></use></svg></a><a href="/WE3-React/week1/" class="nav-list-link">Woche 1</a><ul class="nav-list "><li class="nav-list-item "><a href="/WE3-React/week1/jsx.html" class="nav-list-link">JSX</a></li></ul></li><li class="nav-list-item"><a href="#" class="nav-list-expander"><svg viewBox="0 0 24 24"><use xlink:href="#svg-arrow-right"></use></svg></a><a href="/WE3-React/week2/" class="nav-list-link">Woche 2</a><ul class="nav-list "><li class="nav-list-item "><a href="/WE3-React/week2/introduction.html" class="nav-list-link">Woche 2 - Einführung</a></li><li class="nav-list-item "><a href="/WE3-React/week2/conditionalRendering.html" class="nav-list-link">Conditional Rendering</a></li><li class="nav-list-item "><a href="/WE3-React/week2/sessionStorage.html" class="nav-list-link">Session Storage</a></li><li class="nav-list-item "><a href="/WE3-React/week2/dataloading.html" class="nav-list-link">Data Loading</a></li><li class="nav-list-item "><a href="/WE3-React/week2/reactRouter.html" class="nav-list-link">React Router</a></li></ul></li><li class="nav-list-item"><a href="#" class="nav-list-expander"><svg viewBox="0 0 24 24"><use xlink:href="#svg-arrow-right"></use></svg></a><a href="/WE3-React/week3/" class="nav-list-link">Woche 3</a><ul class="nav-list "><li class="nav-list-item "><a href="/WE3-React/week3/introduction.html" class="nav-list-link">Woche 3 - Einführung</a></li><li class="nav-list-item "><a href="/WE3-React/week3/redux.html" class="nav-list-link">Redux</a></li><li class="nav-list-item "><a href="/WE3-React/week3/react-redux.html" class="nav-list-link">React Redux</a></li></ul></li><li class="nav-list-item"><a href="#" class="nav-list-expander"><svg viewBox="0 0 24 24"><use xlink:href="#svg-arrow-right"></use></svg></a><a href="/WE3-React/testat/" class="nav-list-link">Testat</a><ul class="nav-list "></ul></li><li class="nav-list-item"><a href="/WE3-React/about.html" class="nav-list-link">About</a></li></ul> </nav> <footer class="site-footer"> This site uses <a href="https://github.com/just-the-docs/just-the-docs">Just the Docs</a>, a documentation theme for Jekyll. </footer> </div> <div class="main" id="top"> <div id="main-header" class="main-header"> </div> <div id="main-content-wrap" class="main-content-wrap"> <div id="main-content" class="main-content" role="main"> <h{"0": { "doc": "About", "title": "About", "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com . You can find the source code for Minima at GitHub: jekyll / minima . You can find the source code for Jekyll at GitHub: jekyll / jekyll . ", "url": "/WE3-React/about.html", "relUrl": "/about.html" },"1": { "doc": "Conditional Rendering", "title": "Conditional Rendering", "content": "Conditional Rendering erlaubt das Rendering von Teilen einer Komponente, abhängig vom Komponenten State. React reference: https://reactjs.org/docs/conditional-rendering.html . Beispiel: . const Example = () =&gt; { const [show, setShow] = useState(false); return ( &lt;div&gt; {show &amp;&amp; &lt;div&gt; Content to show. &lt;/div&gt;} &lt;button onClick={() =&gt; setShow(!show)}&gt;Show Content &lt;/button&gt; &lt;/div&gt; ); }; . Zum Einstieg und um uns ein wenig mit der Applikation vertraut zu machen wollen wir die Applikation ein wenig aufpeppen. Vielleicht ist es Ihnen auch schon aufgefallen: Beim Login gibt es keine Indikation, ob nach dem Klick überhaupt was passiert. | Task . | . | Fügen Sie einen Loading Indikator als Button Content hinzu. Benutzen Sie Conditional Rendering. | . | Überlegen Sie sich, bei welchem Ereignis die der Loading State geändert werden sollte und setzen Sie diesen mit Hilfe der setState Methode . | . Tips anzeigen Ausserdem wäre es wünschenswert, dass falsch eingegebene Anmeldedaten eine visuelles Feedback hinterlassen. Dies soll in einer eigenständigen Card dargestellt werden. | Task . | . | Fügen Sie eine weitere Card hinzu, welche den User im Falle eines Fehlers im Loginprozess informiert. Benutzen Sie Conditional Rendering. | . | Betrachten Sie die authenticate Funktion, welche der Komponente als Prop mitgegeben wurde. Setzt Sie dort an der richtigen Stelle den Error Zustand. | . Tips anzeigen | https://gitlab.ost.ch/etienne.baumgartner/bor_final/-/compare/initial…conditional_rendering_solution?from_project_id=4572 . | . ", "url": "/WE3-React/week2/conditionalRendering.html", "relUrl": "/week2/conditionalRendering.html" },"2": { "doc": "Data Loading", "title": "Data Loading", "content": "Mit der Implementation der Login Funktionalität können wir uns nun mit dem Fetching der Daten auseinandersetzen. In der BOR Anwendung sollen die Daten nach der Weiterleitung von der Login auf die Dashboard Page gefetched und im State der Komponenten abgelegt werden. Die GET Funktion der User Details und den assozierten Transaktionen sind im api.js File bereits implementiert. ", "url": "/WE3-React/week2/dataloading.html", "relUrl": "/week2/dataloading.html" },"3": { "doc": "Data Loading", "title": "api.js", "content": "Einer der Funktionen, die Sie im Verlaufe dieser Übung verwenden werden ist getAccountDetails. export function getAccountDetails(token) { return getAuthenticatedJson(`/accounts`, token).then(parseJSON); } . | Quiz . | . | Lesen Sie die Implementation von getAuthenticatedJson und erklären Sie den Nutzen dieser Funktion. | . | Die Funktion erweitert den Header eines GET Request mit dem vom Login erhaltenen JWT und ermöglicht somit die Authorisierung auf die Resourcen des Backends. function getAuthenticatedJson(endpoint, token) { return fetch(`${backend}${endpoint}`, { method: \"GET\", headers: { Authorization: `Bearer ${token}`, Accept: \"application/json\", }, }).then(checkStatus); } . | . Antwort anzeigen | Task . | . | Schreiben Sie zwei Hooks, die sich um das Laden der Transaktions Daten und der Account Details kümmern. Achten Sie darauf, dass Datenabfragen ein gültiges Token benötigen. | . | . | Machen Sie Gebrauch vom useEffect Hook und Dependencies List. | Schreiben Sie individuelle Hooks für Account und Transaktionen. | Überlegen Sie sich eine Möglichkeit um ungewollte, wiederholte Fetches zu verhindern. | Die benötigten API Funktionen sind bereits implementiert. | . | . Tips anzeigen | https://gitlab.ost.ch/etienne.baumgartner/bor_final/-/compare/session_storage_solution…data_loading_solution?from_project_id=4572 . | . | Quiz . | . | Weshalb werden hier zwei useEffect Hooks verwendet anstelle von einem? . | . | useEffect führt das Lambda jedes Mal aus, wenn sich abhängige Daten im Array ändern. Wenn nur ein useEffect verwendet wird, dann kann es sein, dass der Effekt nochmals ausgeführt wird wenn die ersten Daten geladen wurden: . useEffect(() =&gt; { if (!user) { getAccountDetails(token).then(({ amount, owner: user }) =&gt; { setUser(user); setAmount(amount); }); } if (!transactions) { getTransactions(token).then(({ result: transactions }) =&gt; setTransactions(transactions) ); } }, [token, user, transactions]); . Werden zum Beispiel die getAccountDetails geladen und mit setUser gespeichert, bevor auch setTransactions aufgerufen wird, dann wird der Effekt nochmals ausgeführt. | . Antwort anzeigen ", "url": "/WE3-React/week2/dataloading.html#apijs", "relUrl": "/week2/dataloading.html#apijs" },"4": { "doc": "Einführung", "title": "Hello World", "content": " ", "url": "/WE3-React/introduction/#hello-world", "relUrl": "/introduction/#hello-world" },"5": { "doc": "Einführung", "title": "Übungen", "content": "Um mit React zu starten verwenden wir Create React App. Dazu benötigen Sie nur eine relativ aktuelle NPM-Version, die Sie aus den vorherigen Übungen bereits haben sollten. Erstellen Sie also ein neues Projekt: . npx create-react-app uebung-1 . Und öffnen Sie das erstellte Projekt im Ordner uebung-1 in der IDE oder dem Editor Ihrer Wahl. Auf der Konsole brauchen Sie nur noch npm start auszuführen und Sie sind bereit für die Entwicklung. Lassen Sie die Konsole am besten im Hintergrund geöffnet, so führen Änderungen am Code direkt zu einem Reload im Browser. Die generierte Projektstruktur ist recht einfach gehalten, umfasst aber schon einen Beispieltest, ein Manifest, etc: . function App() { return ( &lt;div className=\"App\"&gt; &lt;header className=\"App-header\"&gt; &lt;img src={logo} className=\"App-logo\" alt=\"logo\" /&gt; &lt;p&gt; Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload. &lt;/p&gt; &lt;a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\" &gt; Learn React &lt;/a&gt; &lt;/header&gt; &lt;/div&gt; ); } . | Quiz . | . | Inwiefern unterscheidet sich der JSX-Code überhaupt von HTML? . | . | In diesem Beispiel gibt es nur einen Unterschied: anstelle von class wird className verwendet, da class ein Javascript-Keyword ist. | . Antwort anzeigen ", "url": "/WE3-React/introduction/#%C3%BCbungen", "relUrl": "/introduction/#übungen" },"6": { "doc": "Einführung", "title": "Komponenten Erstellen", "content": "Erstellen Sie als erstes Komponenten (in eigenen Dateien) für die einzelnen Tags, so dass am Ende höchstens noch ein HTML-Tag Pro Komponente vorhanden ist. Die App Komponente könnte dann z.B. noch so aussehen: . function App() { return ( &lt;div className=\"App\"&gt; &lt;Header /&gt; &lt;/div&gt; ); } . Hier noch ein Beispiel von JSFiddle . Link button . ", "url": "/WE3-React/introduction/#komponenten-erstellen", "relUrl": "/introduction/#komponenten-erstellen" },"7": { "doc": "Einführung", "title": "Einführung", "content": " ", "url": "/WE3-React/introduction/", "relUrl": "/introduction/" },"8": { "doc": "Home", "title": "Willkommen zu WED 3 - REACT", "content": " ", "url": "/WE3-React/#willkommen-zu-wed-3---react", "relUrl": "/#willkommen-zu-wed-3---react" },"9": { "doc": "Home", "title": "Home", "content": " ", "url": "/WE3-React/", "relUrl": "/" },"10": { "doc": "Woche 3", "title": "Woche 3", "content": "In dieser Woche vertiefen wir Redux und React-Redux. ", "url": "/WE3-React/week3/", "relUrl": "/week3/" },"11": { "doc": "Woche 2", "title": "Woche 2", "content": "In dieser Woche vertiefen wir die folgenden Grundkonzepte der React Programmierung: . | Hooks | Konditionelles Rendering | Data Loading | React Router | Session Storage | . Die Behandlung dieser Themen wird anhand der Bank of Rapperswil App (kurz BOR) durchgeführt. Das Grundgerüst, sowie die API Schnittstellen sind bereits vollständig implementiert. ", "url": "/WE3-React/week2/", "relUrl": "/week2/" },"12": { "doc": "Woche 1", "title": "Woche 1", "content": "Hier steht dann eine Einführung/Übersicht. ", "url": "/WE3-React/week1/", "relUrl": "/week1/" },"13": { "doc": "Testat", "title": "Testat", "content": "Für das Testat steht ein Assignment auf GitHub Classroom bereit. Die Ausgangslage ist dabei die Solution des vorhergehenden Schritts. Für das Testat sollen Sie folgende zwei Aufgaben lösen: . ", "url": "/WE3-React/testat/", "relUrl": "/testat/" },"14": { "doc": "Testat", "title": "Gebrauch vom Redux Store", "content": "Im Moment werden verschiedne Objekte und Werte als Props in App.js an die Unterkomponenten mitgegeben. Schreibe für diese Props passende Reducers, Actions und Slices. Entferne die Props und verbinde die Komponenten (Home, Dashboard, etc.) direkt mit dem Redux-Store. | Task . | . | Integriere die React States in den Redux Store. Anbei eine Liste der Props, welche mindestens in den Redux State verlegt werden müssen: . | User | Token | isAuthenticated | Transactions | . | . | Achte auf folgende Dinge: . | Erstelle einen transactionSlice. Orientiere dich dabei am `loginSlice.js | isAuthenticated kann dem bestehenden loginSlice hinzugefügt werden und braucht keinen eigenen Slice. | User, Token und isAuthenticated States sollen bei Page Reload wieder gesetzt werden. Überlege dir, wie dies mit dem useEffect-Hook und dem sessionStorage verbunden werden kann. | . | . Tips anzeigen ", "url": "/WE3-React/testat/#gebrauch-vom-redux-store", "relUrl": "/testat/#gebrauch-vom-redux-store" },"15": { "doc": "Testat", "title": "Transaktions Komponente", "content": "Erweitere die Transactions-Komponente anhand untenstehendem Abbild. | Task . | . | Erweitere die Transaction Komponente. Um die Implementierung zu vereinfachen, werden drei Files zur Verfügung gestellt. | MonthDropdown | YearDropDown | PaginatedTransactionTable | . Füge diese Files dem ./src/components Ordner der BOR Applikation hinzu und benutze diese Templates zur Erstellung der Transactions-Komponente. Files Herunterladen . | . | Da es sich bei diesem Task um eine grössere Übung handelt, geben wir anbei eine Anleitung für die vorzunehmenden Schritte: . 1. Fetching der Transaktionen . | Nutze api.js, um die Transaktionen abzufragen und speichere die Response in den Redux Store mit Hilfe der Aktionen, welche Du im vorherigen Schritt erstellt hast. Beachte: Die getTransactions(...) Funktion enthält Argumente, mit welchen Du beinflussen kannst, welche Transaktionen abgefragt werden. Dies wird später nochmals wichtig für die Filterung der Transaktionen. | Implementiere die Abfrage in einer eigenen Funktion, um diese später wiederverwenden zu können. | . 2. Einbinden der PaginatedTransactionsTable-Komponente mit Props: . | total soll zusammen mit den Transaktionen im Redux Store abgelegt werden. Die untenstehende Abfrage zeigt auf, wie Du an den Wert kommst: | . getTransactions(token, fromDate, toDate, itemsPerPage, skip).then( ({ result: transactions, query: { resultcount } }) =&gt; { // add transactions to redux store // add resultcount to redux store // resultcount is the total of all transactions in database } . | skip beschreibt wieviele Transaktionen bei einer Abfrage übergangen wurden. Kann im React State gehalten werden. Das Intervall soll auf 10 Transaktionen beschränkt werden. | onForward / onBack beschreiben die angewendeten Funktionen beim Betätgen der Navigation in der Tabelle. Diese Funktionen verändern den skip Wert. Beachte: Falls die Tabelle vorwärts/rückwärts navigiert wird, müssen ebenfalls die neuen Transaktionen abgefragt werden. | . 3. Filter . | Integriere MonthDropdown und YearDropdown | fromDate und toDate sollen als ISOString der getTransaction(...)-Funktion übergeben werden. Benutze das folgende Template: | . fromDate = Moment(`01-01-2000`, 'D-M-YYYY').toISOString(); . Ersetzte die passenden Stellen im Datums String mit dem Filter (Monat bzw. Jahr). | Die Filter sollen beim Fetch der Transaktionen neu berechnet und anschliessend der Anfrage mitgegeben werden. skip zurücksetzen nicht vergessen! | Jedes Mal wenn ein Filter gesetzt oder eine ‘Seite umgeblättert’ wird, muss eine neue Abfrage gestartet werden. | Stell sicher, dass dem Benutzer angezeigt wird, falls keine Transaktionen für ein Filterkombination gefunden wurde (siehe Conditional Rendering) | Beachte: Monate haben unterschiedliche Anzahl Tage. | . 4. Styling . | Nutze reactstrap Komponenten wie Card, Row, Col, etc. | . | . Tips anzeigen ", "url": "/WE3-React/testat/#transaktions-komponente", "relUrl": "/testat/#transaktions-komponente" },"16": { "doc": "Testat", "title": "Refactoring und Cleanup", "content": "Vereinfache wo möglich Komponenten und entferne nicht mehr verwendeten Code. ", "url": "/WE3-React/testat/#refactoring-und-cleanup", "relUrl": "/testat/#refactoring-und-cleanup" },"17": { "doc": "Testat", "title": "Abgabe", "content": "Die Abgabe muss bis am 19.10.2022 um Mitternacht committed und auf GitHub gepusht werden. ", "url": "/WE3-React/testat/#abgabe", "relUrl": "/testat/#abgabe" },"18": { "doc": "Woche 3 - Einführung", "title": "Redux Einführung", "content": "Vorab werden die grundlegenden Techniken von Redux behandelt: . | State | Store | Reducer | Actions | . ", "url": "/WE3-React/week3/introduction.html#redux-einf%C3%BChrung", "relUrl": "/week3/introduction.html#redux-einführung" },"19": { "doc": "Woche 3 - Einführung", "title": "Redux Toolkit", "content": "Redux wird oft mit zu kompliziertem Boilerplate Code in Verbindung gebracht. Redux Toolkit nimmt sich dieser Kritik an und erlaubt den verständlichen Umgang mit Redux. | Slices | Config | WebTools | . ", "url": "/WE3-React/week3/introduction.html#redux-toolkit", "relUrl": "/week3/introduction.html#redux-toolkit" },"20": { "doc": "Woche 3 - Einführung", "title": "Woche 3 - Einführung", "content": " ", "url": "/WE3-React/week3/introduction.html", "relUrl": "/week3/introduction.html" },"21": { "doc": "Woche 2 - Einführung", "title": "Bank of Rapperswil - Einführung", "content": " ", "url": "/WE3-React/week2/introduction.html#bank-of-rapperswil---einf%C3%BChrung", "relUrl": "/week2/introduction.html#bank-of-rapperswil---einführung" },"22": { "doc": "Woche 2 - Einführung", "title": "Setup", "content": "Klone das Bank of Rapperswil Repository: . git clone ssh://git@gitlab.ost.ch:45022/etienne.baumgartner/bor_final.git . Führen sie Die Dependecies Installation durch und starten Sie das Projekt: . npm install npm start . ", "url": "/WE3-React/week2/introduction.html#setup", "relUrl": "/week2/introduction.html#setup" },"23": { "doc": "Woche 2 - Einführung", "title": "Projektaufbau (nur wichtigste Files)", "content": ". ├── src | ├── pages | │ ├── Dashboard.js | │ ├── Home.js | │ ├── Login.js | │ └── Signup.js | ├── components │ | ├── TransactionsTable.js │ | └── TransferFundsForm.js | ├── api.js | ├── App.css | ├── App.js | ├── index.css | └── index.js ├── package.json ├── package-lock.json ├── public └── README.md . ", "url": "/WE3-React/week2/introduction.html#projektaufbau-nur-wichtigste-files", "relUrl": "/week2/introduction.html#projektaufbau-nur-wichtigste-files" },"24": { "doc": "Woche 2 - Einführung", "title": "Woche 2 - Einführung", "content": " ", "url": "/WE3-React/week2/introduction.html", "relUrl": "/week2/introduction.html" },"25": { "doc": "JSX", "title": "JSX", "content": "Hier geht es los. ", "url": "/WE3-React/week1/jsx.html", "relUrl": "/week1/jsx.html" },"26": { "doc": "React Redux", "title": "React Redux", "content": "Nun kennst du die Grundlagen von Redux und es ist an der Zeit diese in unsere BOR Applikation zu integrieren. React stellt spezifische Packages zur Entwicklung mit Redux zur Verfügung. ", "url": "/WE3-React/week3/react-redux.html", "relUrl": "/week3/react-redux.html" },"27": { "doc": "React Redux", "title": "Installation", "content": "npm install react-redux . Dieses Package enthält die offiziellen React Binidngs für Redux. npm install @reduxjs/toolkit . Das Redux Tool Kit haben wir im vorherigen Abschnitt bereits vorgestellt. Es vereinfacht die Entwicklung mit Redux. ", "url": "/WE3-React/week3/react-redux.html#installation", "relUrl": "/week3/react-redux.html#installation" },"28": { "doc": "React Redux", "title": "Redux Store Setup", "content": "| Task . | . | Erstelle ein neues File store.js mit einem vorerst leeren Reducer. | . | Benutze die configureStore API des Redux Toolkits. (Siehe vorheriger Abschnitt) . | . Tips anzeigen Dieses Objekt beinhaltet den Store der BOR Applikation. Ein weiterer Vorteil des Redux Toolkits ist, dass durch diese Konfiguration die DevTools Extensions automatisch miteinbezogen werden und die Webentwicklung dadurch trivialer wird. Stelle sicher, dass du die Redux Devtool Browser Extension in deinem Browser installiert hast. Als zweiter Schritt soll der Store in der React Applikation als Provider eigebunden werden: . | Quiz . | . | Wie und an welcher Stelle in der BOR Applikation, bzw. in einer React Applikation, soll der Store am Besten eingebunden werden? . | . | Der Redux Store enthält State einer Applikation. Dieser State wird global gehalten und sollte daher im index.js eigebunden werden. Die Einbindung wird durch die Provider Schnittstelle des react-redux Packages ermöglicht und umschliesst die &lt;App&gt; Komponente. | . Antwort anzeigen | Task . | . | Binde den Store in die BOR Applikation ein. | . | Benutze die Provider API von react-redux. | . Tips anzeigen | store.js . import { configureStore } from '@reduxjs/toolkit'; const store = configureStore({ reducer: {}, }); export default store; . index.js ... import { Provider } from 'react-redux'; import store from './store'; const root = ReactDOM.createRoot(document.getElementById('root')); root.render( &lt;React.StrictMode&gt; &lt;Provider store={store}&gt; &lt;BrowserRouter&gt; &lt;App /&gt; &lt;/BrowserRouter&gt; &lt;/Provider&gt; &lt;/React.StrictMode&gt; ); . Öffne die Applikation im Browser. Der Store sollte nun in den Redux Dev Tools initialisiert sein. Unter Firefox sieht das so aus: . Achte darauf, dass noch keine Reducer definiert sind und es deshalb zu Fehlermeldungen in der Konsole kommt. | . Lösung ", "url": "/WE3-React/week3/react-redux.html#redux-store-setup", "relUrl": "/week3/react-redux.html#redux-store-setup" },"29": { "doc": "React Redux", "title": "Redux State Slice", "content": "Der Store ist nun erfolgreich initialisiert. Der nächste Schritt ist das Erstellen eines States und die dazugehörigen puren Reducer-Funktionen, um den State zu verändern. Um diese Funktionalität aufzuzeigen, wird ein State Slice für den angemeldeten Benutzer erstellt. | Erstellen eines Slices mit Aktionen und Reducer-Funktionen. | . | ./redux/loginSlice.js . import { createSlice } from '@reduxjs/toolkit'; export const loginSlice = createSlice({ name: 'login', initialState: { user: {}, token: '', }, reducers: { addUserToState: (state, action) =&gt; { state.user = action.payload.user; state.token = action.payload.token; }, removeUserFromState: (state) =&gt; { state = { user: {}, token: '' }; }, }, }); export const { addUserToState, removeUserFromState } = loginSlice.actions; export const loginReducer = loginSlice.reducer; . Der loginReducer muss nun der Store Konfiguration hinzugefügt werden: . store.js . import { configureStore } from '@reduxjs/toolkit'; import { loginReducer } from './redux/loginSlice'; const store = configureStore({ reducer: { login: loginReducer }, }); export default store; . Diese Änderungen haben nun den Store mit einem LoginSlice erweitert. Überprüfe in deinem Redux Browser Dev Tool, dass ein initiales login-Objekt vorhanden ist. | . | Ist dir bei den beiden Funktionen im Reducer etwas aufgefallen? Die addUserToState-Funktion ist nicht pure! In plain Redux sollte dies nicht so gelöst werden, aber mit dem Redux Toolkit geht das in Ordnung, da durch eine integrierte Library die mutierten States in einen vollkommen neuen State umgewandelt werden und somit die Funktion durchaus pure ist! Ein weitere Vereinfachung für den Anwendeung des Redux Toolkits. Jeahi;) . | . Tips anzeigen Der Store wurde erfolgreich mit einem initialen login Objekt erweitert. Der nächste Schritt ist das Einbinden der react-redux-Hooks useSelector und useDispatch, woauch immer der State gebraucht oder verändert wird. | Task . | . | Ersetze den React State für user und token in App.js mit den Values aus dem Redux Store. | . | Benutze die useSelector und useDispatch API von react-redux. Beispiel für Selektieren (Lesen) des Users aus dem Store: . const user = useSelector((state) =&gt; { state.login.user; }); . Ein Dispatch wird folgendermassen initiiert: . const dispatch = useDispatch(); ... // woauch immer eine Änderung auf dem Store durchgeführt werden muss: dispatch(&lt;reducerFunction&gt;({&lt;actionPayload&gt;})) . | . Tips anzeigen | Die React-State Methode wurde auskommentiert und wird durch Dispatches und Selektoren ersetzt. const App = () =&gt; { const [isAuthenticated, setIsAuthenticated] = useState(false); //const [user, setUser] = useState(JSON.parse(sessionStorage.getItem('user'))); //const [token, setToken] = useState(sessionStorage.getItem('token')); const [pathName, setPathName] = useState(null); let location = useLocation(); const dispatch = useDispatch(); const user = useSelector((state) =&gt; state.login.user); const token = useSelector((state) =&gt; state.login.token); const authenticate = (login, password, callback) =&gt; { api .login(login, password) .then(({ token, owner }) =&gt; { setIsAuthenticated(true); //setToken(token); //setUser(owner); dispatch(addUserToState({ user: owner, token })); sessionStorage.setItem('token', token); sessionStorage.setItem('user', JSON.stringify(owner)); }) .catch((error) =&gt; callback(error)); }; const signout = () =&gt; { setIsAuthenticated(false); //setToken(undefined); //setUser(undefined); dispatch(removeUserFromState()); sessionStorage.removeItem('token'); sessionStorage.removeItem('user'); }; ... } . | . Lösung Nun bist Du besetens gerüstet, um dich ans Testat zu machen;) . ", "url": "/WE3-React/week3/react-redux.html#redux-state-slice", "relUrl": "/week3/react-redux.html#redux-state-slice" },"30": { "doc": "React Router", "title": "React Router", "content": "Als Abschluss dieser Übung und als Vorbereitung auf die Übungen und die Bearbeitung des Testats nächste Woche schauen wir uns den Aufbau des React-Routers genauer an. ", "url": "/WE3-React/week2/reactRouter.html", "relUrl": "/week2/reactRouter.html" },"31": { "doc": "React Router", "title": "Routing in React", "content": "React-Router ist bereits seit einigen Jahren ein weit verbreitetes und benutztes Tool, um effizientes Routing in Web Applikation zu ermöglichen. React Router hat drei grundlegende Komponenten: . | Routers | Route Matchers | Navigation Elements | . Routers . Für Webapplikationen stehen zwei Router zur Verfügung. &lt;BrowserRouter&gt; und &lt;HashRouter&gt;. | Quiz . | . | Welcher Router wird in der BOR Applikation benutzt und wo ist diese zu finden? Wieso wird diese Stelle für den Router gewählt? . | . | Die BOR Applikation verwendet den &lt;BrowserRouter&gt;. Angewendet wird der Router im index.js. Die Router Komponente managed die Handhabung und das Rendering der verschiednen Komponenten einer Applikation und befindet sich deshalb am Einstiegspunkt aller Komponenten. Der Router umschliesst die top-Level &lt;App&gt; Komponente und kann somit die gesamte Applikation “steuern”. import { BrowserRouter } from 'react-router-dom'; ... const root = ReactDOM.createRoot(document.getElementById('root')); root.render( &lt;React.StrictMode&gt; &lt;BrowserRouter &gt; &lt;App /&gt; &lt;/BrowserRouter&gt; &lt;/React.StrictMode&gt; ); . | . Antwort anzeigen | Quiz . | . | Was ist der Unterschied zwischen &lt;BrowserRouter&gt; und &lt;HashRouter&gt;? Entscheid anhand deiner Recherche, ob der momentan benutze Router für die BOR Applikation geignet ist. | . | &lt;BrowserRouter&gt;: Benutzt reguläre URL Pfade. Kann für server- und clientseitiges Rendering benutzt werden. Serverseitiges Rendering setzt die korrekte Konfiguration der Routen auf Client und Server voraus. &lt;HashRouter&gt;: Benutzt URL Pfade mit Hashtag, zum Beispiel: http://example.com/#/page. Das ‘#’ wird nicht an den Server geschickt und es braucht daher auch keine spezielle serverseitige Konfiguration. Für die BOR Applikation können beide Router benutzt werden. Da jedoch keine Pages serverseitig generiert und die Daten durch gezielte Request abgefragt werden, kann durchaus ein &lt;HashRouter&gt; benutzt werden. import { HashRouter } from 'react-router-dom'; ... const root = ReactDOM.createRoot(document.getElementById('root')); root.render( &lt;React.StrictMode&gt; &lt;HashRouter &gt; &lt;App /&gt; &lt;/HashRouter&gt; &lt;/React.StrictMode&gt; ); . | . Antwort anzeigen Route Matchers . Es gibt zwei Komponenten, die sich um das Matching der URL kümmert, &lt;Switch&gt; und &lt;Route&gt;. &lt;Switch&gt; durchsucht seine untergeordneten &lt;Route&gt; Komponenten und wählt diejenige, welche auf die momentane URL passt. Falls es eine findet, wird diese &lt;Route&gt; Komponente gerendert und die restlichen Routen werden ignoriert. Wichtig zu beachten ist, dass längere bzw. spezifischere Routen vor weniger spezifischeren Routen gesetzt werden müssen. Das einfachste Beispiel dafür ist &lt;Route path='/'&gt;. DIese Route matchet der URL immer! Daher wird diese Route innerhalb einer &lt;Switch&gt;Komponente als letztes definiert. Die einfachste Art und weise diese Routen Ordnung zu Umgehen, ist das setzt des props exact. Eine &lt;Route exact path='/path/blabla/&gt; Komponente wird gerendert, sobald die URL genau mit dem Pfad übereinstimmt, egal wo diese im &lt;Switch&gt; platziert ist. Hier ist ein Beispiel der Entwickler des React Routers: . function App() { return ( &lt;div&gt; &lt;Switch&gt; {/* If the current URL is /about, this route is rendered while the rest are ignored */} &lt;Route path=\"/about\"&gt; &lt;About /&gt; &lt;/Route&gt; {/* Note how these two routes are ordered. The more specific path=\"/contact/:id\" comes before path=\"/contact\" so that route will render when viewing an individual contact */} &lt;Route path=\"/contact/:id\"&gt; &lt;Contact /&gt; &lt;/Route&gt; &lt;Route path=\"/contact\"&gt; &lt;AllContacts /&gt; &lt;/Route&gt; {/* If none of the previous routes render anything, this route acts as a fallback. Important: A route with path=\"/\" will *always* match the URL because all URLs begin with a /. So that's why we put this one last of all */} &lt;Route path=\"/\"&gt; &lt;Home /&gt; &lt;/Route&gt; &lt;/Switch&gt; &lt;/div&gt; ); } . WICHTIG: Die BOR Applikation verwendet react-router-dom Version 6.3.0. Darin wurde &lt;Switch&gt; durch &lt;Routes&gt; ersetzt. Ausserdem werden die zu rendernden Komponenten in &lt;Route&gt; nicht als Kinder, sonder als Props übergeben. Navigation . Die Navigation wird durch die &lt;Link&gt; oder &lt;NavLink&gt; Komponente zur Verfügung gestellt. Dabei ist &lt;NavLink&gt; die spezielle Variante von &lt;Link&gt; die sich je nach aktiver URL stylen lässt. Die BOR Applikation ermöglicht die Navigation in der Menu Leiste. const MenuBar = () =&gt; { return ( &lt;Container&gt; &lt;Card style=&gt; &lt;Navbar color=\"light\" expand=\"md\" light&gt; &lt;NavbarBrand href=\"/\"&gt; {user.firstname} {user.lastname} - {user.accountNr} &lt;/NavbarBrand&gt; &lt;Nav className=\"mr-auto\" pills&gt; &lt;NavItem&gt; &lt;NavLink tag={Link} active={pathName === \"/dashboard\"} to={\"/dashboard\"} &gt; Dashboard &lt;/NavLink&gt; &lt;/NavItem&gt; &lt;/Nav&gt; &lt;Nav className=\"mr-auto\" style= pills&gt; &lt;NavItem&gt; &lt;NavLink href=\"/\" onClick={signout}&gt; Logout {user.firstname} {user.lastname}{\" \"} &lt;/NavLink&gt; &lt;/NavItem&gt; &lt;/Nav&gt; &lt;/Navbar&gt; &lt;/Card&gt; &lt;/Container&gt; ); }; . ", "url": "/WE3-React/week2/reactRouter.html#routing-in-react", "relUrl": "/week2/reactRouter.html#routing-in-react" },"32": { "doc": "React Router", "title": "Testat Vorbereitung", "content": "| Task . | . | Die BOR Applikation braucht eine weitere Route. Erstelle eine neue Komponente transactions, eine Route auf für diese Komponente und füge einene neuen Link in der Menuleiste hinzu. | . | Die Transaktions Komponente kann leer sein. Aber achte darauf, dass die Funktionalität beim Wechsel zwischen Dashboard und Transaktion sichergestellt ist. | . Tips anzeigen | https://gitlab.ost.ch/etienne.baumgartner/bor_final/-/compare/data_loading_solution…react_router_solution?from_project_id=4572 . | . ", "url": "/WE3-React/week2/reactRouter.html#testat-vorbereitung", "relUrl": "/week2/reactRouter.html#testat-vorbereitung" },"33": { "doc": "Redux", "title": "Redux - Einführung", "content": "Redux ermöglicht das einfache Handling des globalen States einer Anwendung an einer zentrierten Stelle, dem Redux Store. Um den State zu ändern, werden sogenannte Actions dispatched. | Actions beschreiben dabei, was geändert werden soll | Dispatch kümmert sich um die Übermittlung an den Store | . Eine spezifische Aktion ändert im Store durch eine pure Reducer-Funktion den betroffenen State. | Reducer enthält die gewünschte Änderungslogik des von einer Aktion betroffenen States. | . ", "url": "/WE3-React/week3/redux.html#redux---einf%C3%BChrung", "relUrl": "/week3/redux.html#redux---einführung" },"34": { "doc": "Redux", "title": "Redux Beispiel", "content": "Hier ist simples Beispiel von der Redux Webseite. import { createStore } from 'redux'; /** * This is a reducer - a function that takes a current state value and an * action object describing \"what happened\", and returns a new state value. * A reducer's function signature is: (state, action) =&gt; newState * * The Redux state should contain only plain JS objects, arrays, and primitives. * The root state value is usually an object. It's important that you should * not mutate the state object, but return a new object if the state changes. * * You can use any conditional logic you want in a reducer. In this example, * we use a switch statement, but it's not required. */ function counterReducer(state = { value: 0 }, action) { switch (action.type) { case 'counter/incremented': return { value: state.value + 1 }; case 'counter/decremented': return { value: state.value - 1 }; default: return state; } } // Create a Redux store holding the state of your app. // Its API is { subscribe, dispatch, getState }. let store = createStore(counterReducer); // You can use subscribe() to update the UI in response to state changes. // Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly. // There may be additional use cases where it's helpful to subscribe as well. store.subscribe(() =&gt; console.log(store.getState())); // The only way to mutate the internal state is to dispatch an action. // The actions can be serialized, logged or stored and later replayed. store.dispatch({ type: 'counter/incremented' }); // {value: 1} store.dispatch({ type: 'counter/incremented' }); // {value: 2} store.dispatch({ type: 'counter/decremented' }); // {value: 1} . Instead of mutating the state directly, you specify the mutations you want to happen with plain objects called actions. Then you write a special function called a reducer to decide how every action transforms the entire application’s state. In a typical Redux app, there is just a single store with a single root reducing function. As your app grows, you split the root reducer into smaller reducers independently operating on the different parts of the state tree. This is exactly like how there is just one root component in a React app, but it is composed out of many small components. This architecture might seem like a lot for a counter app, but the beauty of this pattern is how well it scales to large and complex apps. It also enables very powerful developer tools, because it is possible to trace every mutation to the action that caused it. You can record user sessions and reproduce them just by replaying every action. ", "url": "/WE3-React/week3/redux.html#redux-beispiel", "relUrl": "/week3/redux.html#redux-beispiel" },"35": { "doc": "Redux", "title": "Redux Toolkit", "content": "Das Redux Toolkit erleichtert die Benutzung von Redux. Eine Slice Taktik wird eingeführt, welche es verinfacht, verschiednene States, Actions und Reducers zu bündeln und auszulagern. Das obige Beispiel sieht durch die Verwendung von Redux Toolkit wiefolgt aus: . import { createSlice, configureStore } from '@reduxjs/toolkit'; const counterSlice = createSlice({ name: 'counter', initialState: { value: 0, }, reducers: { incremented: (state) =&gt; { // Redux Toolkit allows us to write \"mutating\" logic in reducers. It // doesn't actually mutate the state because it uses the Immer library, // which detects changes to a \"draft state\" and produces a brand new // immutable state based off those changes state.value += 1; }, decremented: (state) =&gt; { state.value -= 1; }, }, }); export const { incremented, decremented } = counterSlice.actions; const store = configureStore({ reducer: counterSlice.reducer, }); // Can still subscribe to the store store.subscribe(() =&gt; console.log(store.getState())); // Still pass action objects to `dispatch`, but they're created for us store.dispatch(incremented()); // {value: 1} store.dispatch(incremented()); // {value: 2} store.dispatch(decremented()); // {value: 1} . Die Ideen und Techniken bleiben dieselben, doch wie wir sehen werden erlaubt das Redux Toolkit eine etwas angenehmere Umsetzung. ", "url": "/WE3-React/week3/redux.html#redux-toolkit", "relUrl": "/week3/redux.html#redux-toolkit" },"36": { "doc": "Redux", "title": "Redux", "content": " ", "url": "/WE3-React/week3/redux.html", "relUrl": "/week3/redux.html" },"37": { "doc": "Session Storage", "title": "Session Storage", "content": "Der Session Storage wird gebraucht, um Daten als Key/Value im Browser abzulegen. Die naheligenste Anwendung ist das Ablegen eines Users, um das wiederholte Anmelden bei einem Refresh zu umgehen. Dabei ist zu beachten, dass es sich die Lebenszeit der Daten im Session Storage auf eine Session beschränken. Wird ein Fenster/Tab geschlossen, das den Session Storage benützt, gehen ebenfalls alle Daten im Session Storage verloren. Für eine längere Lebenszeit siehe Local Sotage. Für die BOR Anwendung sollen Sie den Session Storage einrichten. Dies verhindert die erzwungene Neuanmeldung nach einem Page Refresch (kommt in der Entwicklung sehr oft vor). | Quiz . | . | Welche Daten sollen im Session Storage abgelegt werden? . | . | User und Token. | . Antwort anzeigen | Quiz . | . | In welcher Funktion soll der Session Storage eingesetzt werden? . | . | Direkt in der authenicate Funktion. | . Antwort anzeigen | Task . | . | Fügen Sie die benötigten Daten in den Session Storage ein. | . | . | Achten Sie darauf, die bisherige Funktionalität der State Objekte (User, Token, isAuthenticated) sicherzustellen. | Der initiale State eines Objekts kann direkt mit den Daten des Session Storages initiiert werden. | isAuthenticated muss bei Änderungen von User und Token geändert werden. | Benutze JSON.stringify und JSON.parse für den User | . | . Tips anzeigen | https://gitlab.ost.ch/etienne.baumgartner/bor_final/-/compare/conditional_rendering_solution…session_storage_solution?from_project_id=4572 . | . ", "url": "/WE3-React/week2/sessionStorage.html", "relUrl": "/week2/sessionStorage.html" } } <hr> <footer> <p class="text-small text-grey-dk-100 mb-0">Copyright © 2022 Mirko Stocker. This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons A-NC-SA 4.0 International License</a>.</p> </footer> </div> </div> </div> </body> </html>
